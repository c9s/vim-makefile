# vim:filetype=make:foldmethod=marker:
# Makefile: install/uninstall/link vim plugin files.
# Author: Cornelius <cornelius.howl@gmail.com>
# Date:   ä¸€  3/15 22:49:26 2010
#
# PLEASE DO NOT EDIT THIS FILE. THIS FILE IS AUTO-GENERATED FROM Makefile.tpl
#
# TODO: support vimball.
#
# LICENSE {{{
# Copyright (c) 2010 <Cornelius (c9s)>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# }}}

# USER CONFIGURATION {{{
NAME=PLUGIN_NAME

DIRS=autoload \
	 after \
	 doc \
	 syntax \
	 plugin \
	 compiler \
	 indent

# }}}
# VIM RECORD FORMAT: {{{
# {
#           version => 0.2,    # record spec version
#           generated_by => 'Vimana-' . $Vimana::VERSION,
#           install_type => 'auto',    # auto , make , rake ... etc
#           package => $self->package_name,
#           files => \@e,
# }
# }}}
# INTERNAL {{{
RECORD_FILE=.record
VIMRUNTIME=~/.vim
PWD=`pwd`

fetch_deps = \
		if [[ ! -z `which wget` ]] ; then 		\
			wget $(1) -O $(2) ; 				\
		elif [[ ! -z `which curl` ]] ; then     \
			curl $(1) > $(2) ;					\
		fi

fetch_github = \
		if [[ ! -z `which wget` ]] ; then                               \
			wget --progress=dot http://github.com/$(1)/$(2)/raw/$(3)/$(4) -O $(5) ; \
		elif [[ ! -z `which curl` ]] ; then                        	    \
			curl http://github.com/$(1)/$(2)/raw/$(3)/$(4) > $(5)     ; \
		fi

fetch_local = \
		@cp -v $(1) $(2)
# }}}

bundle:
# $(call fetch_github,[account id],[project],[branch],[source path],[target path])
# $(call fetch_url,[file url],[target path])
# $(call fetch_local,[from],[to])

all: install

init-runtime:
	@mkdir -p $(VIMRUNTIME)
	@mkdir -p $(VIMRUNTIME)/record
	@find $(DIRS) -type d | while read dir ;  do \
			mkdir -p $(VIMRUNTIME)/$$dir ; done

pure-install:
	@echo "Installing"
	@find $(DIRS) -type f | while read file ; do \
			cp -v $$file $(VIMRUNTIME)/$$file ; done

install: init-runtime pure-install record

uninstall: rmrecord
	@echo "Uninstalling"
	@find $(DIRS) -type f | while read file ; do \
			rm -v $(VIMRUNTIME)/$$file ; done

link: init-runtime
	@echo "Linking"
	@find $(DIRS) -type f | while read file ; do \
			ln -sfv $(PWD)/$$file $(VIMRUNTIME)/$$file ; done

mkfilelist:
	@echo $(NAME) > $(RECORD_FILE)
	@find $(DIRS) -type f | while read file ; do \
			echo $(VIMRUNTIME)/$$file >> $(RECORD_FILE) ; done

mkrecordscript:
{{Script}}

record: mkfilelist mkrecordscript
	vim --noplugin -c "redir! > install.log" -c "so .record.vim" -c "q"
	@echo "Vim script record making log file: install.log"

rmrecord:
	rm -v $(VIMRUNTIME)/record/$(NAME)

clean:
	rm -v $(RECORD_FILE)
	rm install.log

version:
	@echo version - $(MAKEFILE_VERSION)

